#!/usr/bin/python3
# -*-python-*-

import os
import sys
from os.path import expanduser
from pwd import getpwnam
from grp import getgrnam

import glob
import syslog
# from string import split
import mido

import usb.core

mido.set_backend( 'mido.backends.rtmidi' )

rundir = "/var/run/midi/"

####### Start User Edits #########

# Controller USB parms (iConnectivity)
control_vid = 0x2321
control_pid = 0x0005

# Controller MIDI device
control_midi_tokens = ( 'mio2', 'MIDI 2' )

# MIDI listen channel
control_midi_channel = 2

# midi USB parms - NOTE: Leave the '0x0000' entry as-is!
midi_vid = 0x0582
midi_pids = ( 0x01d8, 0x0000 )

midi_midi_tokens = ( 'midi', 'MIDI 1' )
midi_midi_channel = 1

######## End User Edits ##########

def find_midi_devices():
    control_midi_device = None
    for name in mido.get_input_names():
        if control_midi_tokens[0] in name and control_midi_tokens[1] in name:
            control_midi_device = name
            break

    if control_midi_device == None:
        syslog.syslog( "%d: Cannot find controller MIDI device" % pid )

    midi_midi_device = None
    for name in mido.get_output_names():
        if midi_midi_tokens[0] in name and midi_midi_tokens[1] in name:
            midi_midi_device = name
            break

    if midi_midi_device == None:
        syslog.syslog( "%d: Cannot find midi MIDI device" % pid )

    return control_midi_device, midi_midi_device


# Look for devices
controller = usb.core.find( idVendor = control_vid, idProduct = control_pid )
if ( not controller ):
    sys.exit( 0 )

midi = False
for pid in midi_pids:
    device = usb.core.find( idVendor = midi_vid, idProduct = pid )
    if ( device ):
        midi = True
        break

if ( not midi ):
    sys.exit( 0 )

pid = os.getpid()
# syslog.syslog( "%d: Starting" % pid )

control_midi_device, midi_midi_device = find_midi_devices()

# Look for atomic pid file
os.chdir( rundir )
filelist = glob.glob( 'midi_*' )
if len( filelist ) != 1:
    syslog.syslog( "%d: /var/run/midi is not properly setup" % pid )
    sys.exit( 0 )

# Found file.  Parse out the PID of the process that created it.
lockfile = filelist[0]
oldpid = lockfile.split( '_' )[1]

# syslog.syslog( "%d: Check for path /proc/%s" % (pid, oldpid) )
if not os.path.exists( "/proc/%s" % oldpid ):
    # No such process, ok to start ours
    # syslog.syslog( "%d: Renaming %s to midi_%d" % (pid, lockfile, pid) )
    try:
        os.rename( lockfile, "midi_%d" % os.getpid() )
    except Exception:
        pass
        # syslog.syslog( "%d: Unable to rename file" % pid )
    else:
        # syslog.syslog( "%d: About to exec" % pid )
        # Drop privileges and start the program
        pwObj = getpwnam('midi-user')
        os.setgid( pwObj.pw_gid )
        
        # Need secondary groups to access MIDI and USB devices
        sec_gids = ( getgrnam('plugdev').gr_gid, getgrnam('audio').gr_gid )
        os.setgroups( sec_gids )

        os.setuid( pwObj.pw_uid )

        # Set path for support modules
        os.environ['PYTHONPATH'] = "/usr/local/share/midi"

        # Run in midi-user's home directory so we can write preset file.
        os.chdir( "/home/midi-user" )

        os.execl( "/usr/local/bin/midi_bridge_app", "midi_bridge",
                  "%s" % control_midi_device, "%s" % control_midi_channel,
                  "%s" % midi_midi_device, "%s" % midi_midi_channel,
                  "preset.data" )
